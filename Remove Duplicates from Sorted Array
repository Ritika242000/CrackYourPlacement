Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.
Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.
Return k after placing the final result in the first k slots of nums.
Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.

Approach 1 : Using sets (Brute force)
TC = O(NlogN)+ O(N)  // N for travering into into the array and logN for inserting into the set and O(N) for placing the unique elements again into the array.
SC = O(N) // Because we are storing all the elements of array into the set.

Solution:

class Solution {
public:
  int removeDuplicates(vector<int>& nums){
  set<int>s;
  for(int i=0;i<nums.size();i++)
      set.insert(nums[i]);
  nums.assign(s.begin() , s.end());  // because elemets in set in set gets stored in ascending order so the element will store from the starting position
  return s.size();
   }
  }
  
  
  
  Approach 2 : Using the 2 pointer approach
  TC = O(N)
  SC = O(N)
  
  1. Initialise the variable i with 0 and j with 1.
  2. Run the for loop till the size of given array.
  3. If the value at i is equal to value at j , then increment j by one.
  4. If value at i is not equal to value at j , then increment i by one and place the value of i to j.
  5. You will get the unique elements at the starting of the array.
  6. Return the i+1 because it will give the length of unique elements.
  
  Solution:
  
  class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if(nums.size()==0)
            return 0;
        
        int i=0;
        for(int j=1;j<nums.size();j++)
        {
           if(nums[i] != nums[j])
           {
               i++;
               nums[i] = nums[j];
           }
        }
        return i+1;
    }
};
  
