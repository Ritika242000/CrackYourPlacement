Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

Approach 1 : Using Count Sort
TC = O(2N) SC=O(1)

1. Take three variables initialize them with 0.
2. Run a for loop and count the number of 0's , 1's and 2's.
3. Place the o's , 1's and 2's as per their count.
4. Sorted array will be there.

Solution-

class Solution {
public:
    void sortColors(vector<int>& nums) {
         int count0 = 0;
        int count1 = 0; 
        int count2  = 0;
        for(int i =0; i< nums.size(); i++){
            if(nums[i] == 0){
                count0++;
            }else if (nums[i] == 1){
                count1++;
            }else if (nums[i] ==2 ){
                count2++;
            }
            
         }
        for(int i =0; i< count0; i++){
            nums[i] =0;
        }
        for(int i =count0; i< (count1 + count0); i++){
            nums[i] =1;
        }
        for(int i =(count1 + count0); i< nums.size(); i++){
            nums[i] =2;
        }
    }
};



Approach2 : Optimised solution using Dutch National Flag Algorithm(Three pointers Approach)
TC = O(N) , SC= O(1)

   1. Create three pointers low , mid , high.
   2. Initialise low and mid at start and high at the end .
   3. Check the condition till mid and high pointer crosses each other.
   4. If the number is 0 then swap the low and mid pointer and increment both the pointers.
   5. If the number is 1 then increment the mid pointer by 1.
   6. If the number is 2 then swap the mid and high pointer and decrement the high pointer.
   7. After doing this , all the numbers on the left of low will be 0 , all the numbers on the right of high will be 2 and all the numbers in between low and mid-1 will be 1.
   8. This will create a sorted array.
   
 Solution- 
 
   class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low=0;
        int mid =0;
        int high=nums.size()-1;
        
        while(mid<=high){
           switch(nums[mid]){
               case 0 :
                   swap(nums[low] , nums[mid]);
                      low++;
                      mid++;
                      break; 
                   
               case 1:
                   mid++;
                   break;
                
               case 2:
                   swap(nums[mid] , nums[high]);
                       high--;
                       break;
           }
        }
    }
};
